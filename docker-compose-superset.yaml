
x-superset-image: &superset-image apache/superset:latest
x-superset-depends-on: &superset-depends-on
  - bici-superset-redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./superset_docker:/app/docker
  - ./data/superset_home:/app/superset_home

version: "3.7"
services:
  bici-superset-redis:
    image: redis:7
    container_name: bici_superset_cache
    restart: unless-stopped
    volumes:
      - ./data/superset_redis:/data

  bici-superset-db:
    env_file: ./.env
    image: postgres:14
    container_name: bici_superset_db
    restart: unless-stopped
    volumes:
      - ./data/superset_db:/var/lib/postgresql/data
    ports:
      - 3432:5432

  bici-superset:
    env_file: ./.env
    image: *superset-image
    container_name: bici_superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    # depends_on: *superset-depends-on
    volumes: *superset-volumes
    environment:
      - SUPERSET_FEATURE_EMBEDDED_SUPERSET=value

  bici-superset-init:
    image: *superset-image
    container_name: bici_superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: ./.env
    # depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true

  bici-superset-worker:
    image: *superset-image
    container_name: bici_superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: ./.env
    restart: unless-stopped
    # depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping -A superset.tasks.celery_app:app -d celery@$$HOSTNAME"]

  bici-superset-worker-beat:
    image: *superset-image
    container_name: bici_superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: ./.env
    restart: unless-stopped
    # depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true

  # bici-db:
  #     image: kartoza/postgis:15-3.3
  #     volumes:
  #       - /geo-db-data:/var/lib/postgresql
  #     ports:
  #       - ${POSTGRES_PORT}:5432
  #     environment:
  #       - POSTGRES_DB=${POSTGRES_DB}
  #       - POSTGRES_USER=${POSTGRES_USER}
  #       - POSTGRES_PASS=${POSTGRES_PASS}
  #       - ALLOW_IP_RANGE=${ALLOW_IP_RANGE}
  #       - FORCE_SSL=TRUE
  #     restart: on-failure
  #     healthcheck:
  #       test: "PGPASSWORD=${POSTGRES_PASS} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"

  #  geoserver:
  #     image: kartoza/geoserver:${GS_VERSION}
  #     volumes:
  #       - geoserver-data:/opt/geoserver/data_dir
  #     restart: on-failure
  #     environment:
  #       - GEOSERVER_DATA_DIR=${GEOSERVER_DATA_DIR}
  #       - GEOWEBCACHE_CACHE_DIR=${GEOWEBCACHE_CACHE_DIR}
  #       - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
  #       - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
  #       - INITIAL_MEMORY=${INITIAL_MEMORY}
  #       - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
  #     depends_on:
  #       db:
  #         condition: service_healthy
  #     healthcheck:
  #       test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null -u ${GEOSERVER_ADMIN_USER}:'${GEOSERVER_ADMIN_PASSWORD}' http://localhost:8080/geoserver/rest/about/version.xml"
  #       interval: 1m30s
  #       timeout: 10s
  #       retries: 3

  #  nginx:
  #    image: nginx
  #    volumes:
  #      - ./sites-enabled:/etc/nginx/conf.d:ro
  #    logging:
  #      driver: json-file
  #      options:
  #        max-size: 200m
  #        max-file: '10'
  #    depends_on:
  #      - geoserver
  #    ports:
  #      - "80:80"    

      
       
# volumes:
#   superset_home:
#     external: false
#   db_home:
#     external: false
#   redis:
#     external: false